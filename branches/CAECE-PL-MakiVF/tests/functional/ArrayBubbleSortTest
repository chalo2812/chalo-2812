var arreglo[10] : integer;
   
{intercambiar dos elementos de un arreglo}
procedure INTERCAMBIAR(primero: natural, segundo: natural);
var almacen : integer; {area temporal de almacenamiento para intercambiar}
begin
  almacen := arreglo[primero];
  arreglo[primero] := arreglo[segundo];
  arreglo[segundo] := almacen;
end-proc;
 
{ordenar elementos del arreglo con el metodo burbuja}
procedure ORDENAMBURBUJA();
var pasada : integer; 
var elemento : natural;
var aux : natural;
var almacen, valor :integer;
begin
  pasada := 1;

  {Ciclo para controlar el numero de pasadas}
  while pasada < 10 do
  
  		{ciclo para controlar numero de comparaciones}
  		elemento := 1n;
  		while elemento < 10n do
    		
    		{comparar elementos uno a uno e intercambiarlos si}
    		{el primer elemento es mayor que el segundo}
    		if arreglo[elemento ++ 1n] < arreglo[elemento] then
      			aux := elemento;
      			almacen := arreglo[aux];
      			valor := arreglo[aux ++ 1n];
  				arreglo[aux] := valor;
  				arreglo[aux ++ 1n] := almacen;
    		end-if;
    		
		elemento := elemento ++ 1n;
		
     	end-while; {fin del ciclo para controlar las comparaciones}
     	
    pasada := pasada + 1;
    
  end-while; {fin del ciclo para controlar las pasadas}
  
end-proc; 
 
 
procedure MAIN();
var i: natural;
begin
  showLN 'Este algoritmo realiza el ordenamiento de un arreglo utilizando el método de Burbuja';
  showLN ' ';

  arreglo[1n] := 2;
  arreglo[2n] := 6;
  arreglo[3n] := 4;
  arreglo[4n] := 8;  
  arreglo[5n] := 10;
  arreglo[6n] := 12;
  arreglo[7n] := 89;
  arreglo[8n] := 68;
  arreglo[9n] := 45;
  arreglo[10n] := 37;
  
  i := 1n;
  showLN 'Elementos de datos en su orden original';
  while i <= 5n do
  	showLN 'Mostrar Arreglo, Posicion ', i,' es ', arreglo[i]; 
  	i := i + 1n;
  end-while;
  
  showLN 'Elementos de datos en orden ascendente';
  ORDENAMBURBUJA();
   
  i := 1n;
  while i <= 10n do
  	showLN 'Mostrar Arreglo, Posicion ', i,' es ', arreglo[i]; 
  	i := i + 1n;
  end-while;
  
end-proc;