var j: integer;
var i: natural;
var estadoerror:integer;

procedure SI1INTEGER();
begin
	if j = 1 then
	else
		showLN '[TestFalse]- "j"  debe ser = a 1';
		estadoerror := 1;
  	end-if;
  	if j <> 1 then
  		showLN '[TestFalse]- "j" no debe ser <> a 1';
  		estadoerror := 1;
  	end-if;
	if j > 1 then
  		showLN '[TestFalse]- "j" no debe ser mayor a 1';
  		estadoerror := 1;
  	end-if;
  	if j >= 1 then
  	else
  		showLN '[TestFalse]- "j" debe ser >= a 1';
  		estadoerror := 1;
  	end-if;
  	if j < 1 then
  		showLN '[TestFalse]- "j" no debe ser < a 1';
  		estadoerror := 1;
  	end-if;
	if j <= 1 then
	else
		showLN '[TestFalse]- "j"  debe ser <= a 1';
		estadoerror := 1;
  	end-if;
end-proc;

procedure SI1NATURAL();
begin
	if i = 1n then
	else
		showLN '[TestFalse]- "i"  debe ser = a 1n';
		estadoerror := 1;
  	end-if;
  	if i <> 1n then
  		showLN '[TestFalse]- "i" no debe ser <> a 1n';
  		estadoerror := 1;
  	end-if;
	if i > 1n then
  		showLN '[TestFalse]- "i" no debe ser mayor a 1n';
  		estadoerror := 1;
  	end-if;
  	if i >= 1n then
  	else
  		showLN '[TestFalse]- "i" debe ser >= a 1n';
  		estadoerror := 1;
  	end-if;
  	if i < 1n then
  		showLN '[TestFalse]- "i" no debe ser < a 1n';
  		estadoerror := 1;
  	end-if;
	if i <= 1n then
	else
		showLN '[TestFalse]- "i"  debe ser <= a 1n';
		estadoerror := 1;
  	end-if;
end-proc;


procedure MAIN();
var X,Y: integer;
begin
	showLN 'Test funcional de SI';
	estadoerror := 0;
	
	j := 1;
	SI1INTEGER();
  	
  	i := 1;
	SI1NATURAL();
  	
  	if estadoerror = 0 then
  		showLN 'TEST OK!';
  	end-if;
end-proc;
